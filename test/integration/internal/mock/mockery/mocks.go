// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockRepository is an autogenerated mock type for the repository type
type mockRepository struct {
	mock.Mock
}

type mockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRepository) EXPECT() *mockRepository_Expecter {
	return &mockRepository_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: ctx, val
func (_m *mockRepository) Insert(ctx context.Context, val string) error {
	ret := _m.Called(ctx, val)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type mockRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - val string
func (_e *mockRepository_Expecter) Insert(ctx interface{}, val interface{}) *mockRepository_Insert_Call {
	return &mockRepository_Insert_Call{Call: _e.mock.On("Insert", ctx, val)}
}

func (_c *mockRepository_Insert_Call) Run(run func(ctx context.Context, val string)) *mockRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockRepository_Insert_Call) Return(_a0 error) *mockRepository_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRepository_Insert_Call) RunAndReturn(run func(context.Context, string) error) *mockRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// newMockRepository creates a new instance of mockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRepository {
	mock := &mockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockTransactor is an autogenerated mock type for the transactor type
type mockTransactor struct {
	mock.Mock
}

type mockTransactor_Expecter struct {
	mock *mock.Mock
}

func (_m *mockTransactor) EXPECT() *mockTransactor_Expecter {
	return &mockTransactor_Expecter{mock: &_m.Mock}
}

// WithinTx provides a mock function with given fields: ctx, fn
func (_m *mockTransactor) WithinTx(ctx context.Context, fn func(context.Context) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithinTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockTransactor_WithinTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithinTx'
type mockTransactor_WithinTx_Call struct {
	*mock.Call
}

// WithinTx is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(context.Context) error
func (_e *mockTransactor_Expecter) WithinTx(ctx interface{}, fn interface{}) *mockTransactor_WithinTx_Call {
	return &mockTransactor_WithinTx_Call{Call: _e.mock.On("WithinTx", ctx, fn)}
}

func (_c *mockTransactor_WithinTx_Call) Run(run func(ctx context.Context, fn func(context.Context) error)) *mockTransactor_WithinTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *mockTransactor_WithinTx_Call) Return(err error) *mockTransactor_WithinTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockTransactor_WithinTx_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *mockTransactor_WithinTx_Call {
	_c.Call.Return(run)
	return _c
}

// newMockTransactor creates a new instance of mockTransactor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockTransactor(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockTransactor {
	mock := &mockTransactor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

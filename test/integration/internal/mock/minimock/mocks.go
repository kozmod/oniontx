// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package gomock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RepositoryMock implements repository
type RepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcInsert          func(ctx context.Context, val string) (err error)
	funcInsertOrigin    string
	inspectFuncInsert   func(ctx context.Context, val string)
	afterInsertCounter  uint64
	beforeInsertCounter uint64
	InsertMock          mRepositoryMockInsert
}

// NewRepositoryMock returns a mock for repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.InsertMock = mRepositoryMockInsert{mock: m}
	m.InsertMock.callArgs = []*RepositoryMockInsertParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRepositoryMockInsert struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockInsertExpectation
	expectations       []*RepositoryMockInsertExpectation

	callArgs []*RepositoryMockInsertParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RepositoryMockInsertExpectation specifies expectation struct of the repository.Insert
type RepositoryMockInsertExpectation struct {
	mock               *RepositoryMock
	params             *RepositoryMockInsertParams
	paramPtrs          *RepositoryMockInsertParamPtrs
	expectationOrigins RepositoryMockInsertExpectationOrigins
	results            *RepositoryMockInsertResults
	returnOrigin       string
	Counter            uint64
}

// RepositoryMockInsertParams contains parameters of the repository.Insert
type RepositoryMockInsertParams struct {
	ctx context.Context
	val string
}

// RepositoryMockInsertParamPtrs contains pointers to parameters of the repository.Insert
type RepositoryMockInsertParamPtrs struct {
	ctx *context.Context
	val *string
}

// RepositoryMockInsertResults contains results of the repository.Insert
type RepositoryMockInsertResults struct {
	err error
}

// RepositoryMockInsertOrigins contains origins of expectations of the repository.Insert
type RepositoryMockInsertExpectationOrigins struct {
	origin    string
	originCtx string
	originVal string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmInsert *mRepositoryMockInsert) Optional() *mRepositoryMockInsert {
	mmInsert.optional = true
	return mmInsert
}

// Expect sets up expected params for repository.Insert
func (mmInsert *mRepositoryMockInsert) Expect(ctx context.Context, val string) *mRepositoryMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("RepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &RepositoryMockInsertExpectation{}
	}

	if mmInsert.defaultExpectation.paramPtrs != nil {
		mmInsert.mock.t.Fatalf("RepositoryMock.Insert mock is already set by ExpectParams functions")
	}

	mmInsert.defaultExpectation.params = &RepositoryMockInsertParams{ctx, val}
	mmInsert.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmInsert.expectations {
		if minimock.Equal(e.params, mmInsert.defaultExpectation.params) {
			mmInsert.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInsert.defaultExpectation.params)
		}
	}

	return mmInsert
}

// ExpectCtxParam1 sets up expected param ctx for repository.Insert
func (mmInsert *mRepositoryMockInsert) ExpectCtxParam1(ctx context.Context) *mRepositoryMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("RepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &RepositoryMockInsertExpectation{}
	}

	if mmInsert.defaultExpectation.params != nil {
		mmInsert.mock.t.Fatalf("RepositoryMock.Insert mock is already set by Expect")
	}

	if mmInsert.defaultExpectation.paramPtrs == nil {
		mmInsert.defaultExpectation.paramPtrs = &RepositoryMockInsertParamPtrs{}
	}
	mmInsert.defaultExpectation.paramPtrs.ctx = &ctx
	mmInsert.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmInsert
}

// ExpectValParam2 sets up expected param val for repository.Insert
func (mmInsert *mRepositoryMockInsert) ExpectValParam2(val string) *mRepositoryMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("RepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &RepositoryMockInsertExpectation{}
	}

	if mmInsert.defaultExpectation.params != nil {
		mmInsert.mock.t.Fatalf("RepositoryMock.Insert mock is already set by Expect")
	}

	if mmInsert.defaultExpectation.paramPtrs == nil {
		mmInsert.defaultExpectation.paramPtrs = &RepositoryMockInsertParamPtrs{}
	}
	mmInsert.defaultExpectation.paramPtrs.val = &val
	mmInsert.defaultExpectation.expectationOrigins.originVal = minimock.CallerInfo(1)

	return mmInsert
}

// Inspect accepts an inspector function that has same arguments as the repository.Insert
func (mmInsert *mRepositoryMockInsert) Inspect(f func(ctx context.Context, val string)) *mRepositoryMockInsert {
	if mmInsert.mock.inspectFuncInsert != nil {
		mmInsert.mock.t.Fatalf("Inspect function is already set for RepositoryMock.Insert")
	}

	mmInsert.mock.inspectFuncInsert = f

	return mmInsert
}

// Return sets up results that will be returned by repository.Insert
func (mmInsert *mRepositoryMockInsert) Return(err error) *RepositoryMock {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("RepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &RepositoryMockInsertExpectation{mock: mmInsert.mock}
	}
	mmInsert.defaultExpectation.results = &RepositoryMockInsertResults{err}
	mmInsert.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmInsert.mock
}

// Set uses given function f to mock the repository.Insert method
func (mmInsert *mRepositoryMockInsert) Set(f func(ctx context.Context, val string) (err error)) *RepositoryMock {
	if mmInsert.defaultExpectation != nil {
		mmInsert.mock.t.Fatalf("Default expectation is already set for the repository.Insert method")
	}

	if len(mmInsert.expectations) > 0 {
		mmInsert.mock.t.Fatalf("Some expectations are already set for the repository.Insert method")
	}

	mmInsert.mock.funcInsert = f
	mmInsert.mock.funcInsertOrigin = minimock.CallerInfo(1)
	return mmInsert.mock
}

// When sets expectation for the repository.Insert which will trigger the result defined by the following
// Then helper
func (mmInsert *mRepositoryMockInsert) When(ctx context.Context, val string) *RepositoryMockInsertExpectation {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("RepositoryMock.Insert mock is already set by Set")
	}

	expectation := &RepositoryMockInsertExpectation{
		mock:               mmInsert.mock,
		params:             &RepositoryMockInsertParams{ctx, val},
		expectationOrigins: RepositoryMockInsertExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmInsert.expectations = append(mmInsert.expectations, expectation)
	return expectation
}

// Then sets up repository.Insert return parameters for the expectation previously defined by the When method
func (e *RepositoryMockInsertExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockInsertResults{err}
	return e.mock
}

// Times sets number of times repository.Insert should be invoked
func (mmInsert *mRepositoryMockInsert) Times(n uint64) *mRepositoryMockInsert {
	if n == 0 {
		mmInsert.mock.t.Fatalf("Times of RepositoryMock.Insert mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmInsert.expectedInvocations, n)
	mmInsert.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmInsert
}

func (mmInsert *mRepositoryMockInsert) invocationsDone() bool {
	if len(mmInsert.expectations) == 0 && mmInsert.defaultExpectation == nil && mmInsert.mock.funcInsert == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmInsert.mock.afterInsertCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmInsert.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Insert implements repository
func (mmInsert *RepositoryMock) Insert(ctx context.Context, val string) (err error) {
	mm_atomic.AddUint64(&mmInsert.beforeInsertCounter, 1)
	defer mm_atomic.AddUint64(&mmInsert.afterInsertCounter, 1)

	mmInsert.t.Helper()

	if mmInsert.inspectFuncInsert != nil {
		mmInsert.inspectFuncInsert(ctx, val)
	}

	mm_params := RepositoryMockInsertParams{ctx, val}

	// Record call args
	mmInsert.InsertMock.mutex.Lock()
	mmInsert.InsertMock.callArgs = append(mmInsert.InsertMock.callArgs, &mm_params)
	mmInsert.InsertMock.mutex.Unlock()

	for _, e := range mmInsert.InsertMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmInsert.InsertMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInsert.InsertMock.defaultExpectation.Counter, 1)
		mm_want := mmInsert.InsertMock.defaultExpectation.params
		mm_want_ptrs := mmInsert.InsertMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockInsertParams{ctx, val}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmInsert.t.Errorf("RepositoryMock.Insert got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInsert.InsertMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.val != nil && !minimock.Equal(*mm_want_ptrs.val, mm_got.val) {
				mmInsert.t.Errorf("RepositoryMock.Insert got unexpected parameter val, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInsert.InsertMock.defaultExpectation.expectationOrigins.originVal, *mm_want_ptrs.val, mm_got.val, minimock.Diff(*mm_want_ptrs.val, mm_got.val))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInsert.t.Errorf("RepositoryMock.Insert got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmInsert.InsertMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInsert.InsertMock.defaultExpectation.results
		if mm_results == nil {
			mmInsert.t.Fatal("No results are set for the RepositoryMock.Insert")
		}
		return (*mm_results).err
	}
	if mmInsert.funcInsert != nil {
		return mmInsert.funcInsert(ctx, val)
	}
	mmInsert.t.Fatalf("Unexpected call to RepositoryMock.Insert. %v %v", ctx, val)
	return
}

// InsertAfterCounter returns a count of finished RepositoryMock.Insert invocations
func (mmInsert *RepositoryMock) InsertAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.afterInsertCounter)
}

// InsertBeforeCounter returns a count of RepositoryMock.Insert invocations
func (mmInsert *RepositoryMock) InsertBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.beforeInsertCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.Insert.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInsert *mRepositoryMockInsert) Calls() []*RepositoryMockInsertParams {
	mmInsert.mutex.RLock()

	argCopy := make([]*RepositoryMockInsertParams, len(mmInsert.callArgs))
	copy(argCopy, mmInsert.callArgs)

	mmInsert.mutex.RUnlock()

	return argCopy
}

// MinimockInsertDone returns true if the count of the Insert invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockInsertDone() bool {
	if m.InsertMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.InsertMock.invocationsDone()
}

// MinimockInsertInspect logs each unmet expectation
func (m *RepositoryMock) MinimockInsertInspect() {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.Insert at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterInsertCounter := mm_atomic.LoadUint64(&m.afterInsertCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && afterInsertCounter < 1 {
		if m.InsertMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RepositoryMock.Insert at\n%s", m.InsertMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RepositoryMock.Insert at\n%s with params: %#v", m.InsertMock.defaultExpectation.expectationOrigins.origin, *m.InsertMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && afterInsertCounter < 1 {
		m.t.Errorf("Expected call to RepositoryMock.Insert at\n%s", m.funcInsertOrigin)
	}

	if !m.InsertMock.invocationsDone() && afterInsertCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.Insert at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.InsertMock.expectedInvocations), m.InsertMock.expectedInvocationsOrigin, afterInsertCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockInsertInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockInsertDone()
}

// TransactorMock implements transactor
type TransactorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcWithinTx          func(ctx context.Context, fn func(ctx context.Context) error) (err error)
	funcWithinTxOrigin    string
	inspectFuncWithinTx   func(ctx context.Context, fn func(ctx context.Context) error)
	afterWithinTxCounter  uint64
	beforeWithinTxCounter uint64
	WithinTxMock          mTransactorMockWithinTx
}

// NewTransactorMock returns a mock for transactor
func NewTransactorMock(t minimock.Tester) *TransactorMock {
	m := &TransactorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.WithinTxMock = mTransactorMockWithinTx{mock: m}
	m.WithinTxMock.callArgs = []*TransactorMockWithinTxParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTransactorMockWithinTx struct {
	optional           bool
	mock               *TransactorMock
	defaultExpectation *TransactorMockWithinTxExpectation
	expectations       []*TransactorMockWithinTxExpectation

	callArgs []*TransactorMockWithinTxParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TransactorMockWithinTxExpectation specifies expectation struct of the transactor.WithinTx
type TransactorMockWithinTxExpectation struct {
	mock               *TransactorMock
	params             *TransactorMockWithinTxParams
	paramPtrs          *TransactorMockWithinTxParamPtrs
	expectationOrigins TransactorMockWithinTxExpectationOrigins
	results            *TransactorMockWithinTxResults
	returnOrigin       string
	Counter            uint64
}

// TransactorMockWithinTxParams contains parameters of the transactor.WithinTx
type TransactorMockWithinTxParams struct {
	ctx context.Context
	fn  func(ctx context.Context) error
}

// TransactorMockWithinTxParamPtrs contains pointers to parameters of the transactor.WithinTx
type TransactorMockWithinTxParamPtrs struct {
	ctx *context.Context
	fn  *func(ctx context.Context) error
}

// TransactorMockWithinTxResults contains results of the transactor.WithinTx
type TransactorMockWithinTxResults struct {
	err error
}

// TransactorMockWithinTxOrigins contains origins of expectations of the transactor.WithinTx
type TransactorMockWithinTxExpectationOrigins struct {
	origin    string
	originCtx string
	originFn  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmWithinTx *mTransactorMockWithinTx) Optional() *mTransactorMockWithinTx {
	mmWithinTx.optional = true
	return mmWithinTx
}

// Expect sets up expected params for transactor.WithinTx
func (mmWithinTx *mTransactorMockWithinTx) Expect(ctx context.Context, fn func(ctx context.Context) error) *mTransactorMockWithinTx {
	if mmWithinTx.mock.funcWithinTx != nil {
		mmWithinTx.mock.t.Fatalf("TransactorMock.WithinTx mock is already set by Set")
	}

	if mmWithinTx.defaultExpectation == nil {
		mmWithinTx.defaultExpectation = &TransactorMockWithinTxExpectation{}
	}

	if mmWithinTx.defaultExpectation.paramPtrs != nil {
		mmWithinTx.mock.t.Fatalf("TransactorMock.WithinTx mock is already set by ExpectParams functions")
	}

	mmWithinTx.defaultExpectation.params = &TransactorMockWithinTxParams{ctx, fn}
	mmWithinTx.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmWithinTx.expectations {
		if minimock.Equal(e.params, mmWithinTx.defaultExpectation.params) {
			mmWithinTx.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWithinTx.defaultExpectation.params)
		}
	}

	return mmWithinTx
}

// ExpectCtxParam1 sets up expected param ctx for transactor.WithinTx
func (mmWithinTx *mTransactorMockWithinTx) ExpectCtxParam1(ctx context.Context) *mTransactorMockWithinTx {
	if mmWithinTx.mock.funcWithinTx != nil {
		mmWithinTx.mock.t.Fatalf("TransactorMock.WithinTx mock is already set by Set")
	}

	if mmWithinTx.defaultExpectation == nil {
		mmWithinTx.defaultExpectation = &TransactorMockWithinTxExpectation{}
	}

	if mmWithinTx.defaultExpectation.params != nil {
		mmWithinTx.mock.t.Fatalf("TransactorMock.WithinTx mock is already set by Expect")
	}

	if mmWithinTx.defaultExpectation.paramPtrs == nil {
		mmWithinTx.defaultExpectation.paramPtrs = &TransactorMockWithinTxParamPtrs{}
	}
	mmWithinTx.defaultExpectation.paramPtrs.ctx = &ctx
	mmWithinTx.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmWithinTx
}

// ExpectFnParam2 sets up expected param fn for transactor.WithinTx
func (mmWithinTx *mTransactorMockWithinTx) ExpectFnParam2(fn func(ctx context.Context) error) *mTransactorMockWithinTx {
	if mmWithinTx.mock.funcWithinTx != nil {
		mmWithinTx.mock.t.Fatalf("TransactorMock.WithinTx mock is already set by Set")
	}

	if mmWithinTx.defaultExpectation == nil {
		mmWithinTx.defaultExpectation = &TransactorMockWithinTxExpectation{}
	}

	if mmWithinTx.defaultExpectation.params != nil {
		mmWithinTx.mock.t.Fatalf("TransactorMock.WithinTx mock is already set by Expect")
	}

	if mmWithinTx.defaultExpectation.paramPtrs == nil {
		mmWithinTx.defaultExpectation.paramPtrs = &TransactorMockWithinTxParamPtrs{}
	}
	mmWithinTx.defaultExpectation.paramPtrs.fn = &fn
	mmWithinTx.defaultExpectation.expectationOrigins.originFn = minimock.CallerInfo(1)

	return mmWithinTx
}

// Inspect accepts an inspector function that has same arguments as the transactor.WithinTx
func (mmWithinTx *mTransactorMockWithinTx) Inspect(f func(ctx context.Context, fn func(ctx context.Context) error)) *mTransactorMockWithinTx {
	if mmWithinTx.mock.inspectFuncWithinTx != nil {
		mmWithinTx.mock.t.Fatalf("Inspect function is already set for TransactorMock.WithinTx")
	}

	mmWithinTx.mock.inspectFuncWithinTx = f

	return mmWithinTx
}

// Return sets up results that will be returned by transactor.WithinTx
func (mmWithinTx *mTransactorMockWithinTx) Return(err error) *TransactorMock {
	if mmWithinTx.mock.funcWithinTx != nil {
		mmWithinTx.mock.t.Fatalf("TransactorMock.WithinTx mock is already set by Set")
	}

	if mmWithinTx.defaultExpectation == nil {
		mmWithinTx.defaultExpectation = &TransactorMockWithinTxExpectation{mock: mmWithinTx.mock}
	}
	mmWithinTx.defaultExpectation.results = &TransactorMockWithinTxResults{err}
	mmWithinTx.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmWithinTx.mock
}

// Set uses given function f to mock the transactor.WithinTx method
func (mmWithinTx *mTransactorMockWithinTx) Set(f func(ctx context.Context, fn func(ctx context.Context) error) (err error)) *TransactorMock {
	if mmWithinTx.defaultExpectation != nil {
		mmWithinTx.mock.t.Fatalf("Default expectation is already set for the transactor.WithinTx method")
	}

	if len(mmWithinTx.expectations) > 0 {
		mmWithinTx.mock.t.Fatalf("Some expectations are already set for the transactor.WithinTx method")
	}

	mmWithinTx.mock.funcWithinTx = f
	mmWithinTx.mock.funcWithinTxOrigin = minimock.CallerInfo(1)
	return mmWithinTx.mock
}

// When sets expectation for the transactor.WithinTx which will trigger the result defined by the following
// Then helper
func (mmWithinTx *mTransactorMockWithinTx) When(ctx context.Context, fn func(ctx context.Context) error) *TransactorMockWithinTxExpectation {
	if mmWithinTx.mock.funcWithinTx != nil {
		mmWithinTx.mock.t.Fatalf("TransactorMock.WithinTx mock is already set by Set")
	}

	expectation := &TransactorMockWithinTxExpectation{
		mock:               mmWithinTx.mock,
		params:             &TransactorMockWithinTxParams{ctx, fn},
		expectationOrigins: TransactorMockWithinTxExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmWithinTx.expectations = append(mmWithinTx.expectations, expectation)
	return expectation
}

// Then sets up transactor.WithinTx return parameters for the expectation previously defined by the When method
func (e *TransactorMockWithinTxExpectation) Then(err error) *TransactorMock {
	e.results = &TransactorMockWithinTxResults{err}
	return e.mock
}

// Times sets number of times transactor.WithinTx should be invoked
func (mmWithinTx *mTransactorMockWithinTx) Times(n uint64) *mTransactorMockWithinTx {
	if n == 0 {
		mmWithinTx.mock.t.Fatalf("Times of TransactorMock.WithinTx mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmWithinTx.expectedInvocations, n)
	mmWithinTx.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmWithinTx
}

func (mmWithinTx *mTransactorMockWithinTx) invocationsDone() bool {
	if len(mmWithinTx.expectations) == 0 && mmWithinTx.defaultExpectation == nil && mmWithinTx.mock.funcWithinTx == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmWithinTx.mock.afterWithinTxCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmWithinTx.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// WithinTx implements transactor
func (mmWithinTx *TransactorMock) WithinTx(ctx context.Context, fn func(ctx context.Context) error) (err error) {
	mm_atomic.AddUint64(&mmWithinTx.beforeWithinTxCounter, 1)
	defer mm_atomic.AddUint64(&mmWithinTx.afterWithinTxCounter, 1)

	mmWithinTx.t.Helper()

	if mmWithinTx.inspectFuncWithinTx != nil {
		mmWithinTx.inspectFuncWithinTx(ctx, fn)
	}

	mm_params := TransactorMockWithinTxParams{ctx, fn}

	// Record call args
	mmWithinTx.WithinTxMock.mutex.Lock()
	mmWithinTx.WithinTxMock.callArgs = append(mmWithinTx.WithinTxMock.callArgs, &mm_params)
	mmWithinTx.WithinTxMock.mutex.Unlock()

	for _, e := range mmWithinTx.WithinTxMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmWithinTx.WithinTxMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWithinTx.WithinTxMock.defaultExpectation.Counter, 1)
		mm_want := mmWithinTx.WithinTxMock.defaultExpectation.params
		mm_want_ptrs := mmWithinTx.WithinTxMock.defaultExpectation.paramPtrs

		mm_got := TransactorMockWithinTxParams{ctx, fn}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmWithinTx.t.Errorf("TransactorMock.WithinTx got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWithinTx.WithinTxMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.fn != nil && !minimock.Equal(*mm_want_ptrs.fn, mm_got.fn) {
				mmWithinTx.t.Errorf("TransactorMock.WithinTx got unexpected parameter fn, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWithinTx.WithinTxMock.defaultExpectation.expectationOrigins.originFn, *mm_want_ptrs.fn, mm_got.fn, minimock.Diff(*mm_want_ptrs.fn, mm_got.fn))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWithinTx.t.Errorf("TransactorMock.WithinTx got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmWithinTx.WithinTxMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmWithinTx.WithinTxMock.defaultExpectation.results
		if mm_results == nil {
			mmWithinTx.t.Fatal("No results are set for the TransactorMock.WithinTx")
		}
		return (*mm_results).err
	}
	if mmWithinTx.funcWithinTx != nil {
		return mmWithinTx.funcWithinTx(ctx, fn)
	}
	mmWithinTx.t.Fatalf("Unexpected call to TransactorMock.WithinTx. %v %v", ctx, fn)
	return
}

// WithinTxAfterCounter returns a count of finished TransactorMock.WithinTx invocations
func (mmWithinTx *TransactorMock) WithinTxAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWithinTx.afterWithinTxCounter)
}

// WithinTxBeforeCounter returns a count of TransactorMock.WithinTx invocations
func (mmWithinTx *TransactorMock) WithinTxBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWithinTx.beforeWithinTxCounter)
}

// Calls returns a list of arguments used in each call to TransactorMock.WithinTx.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWithinTx *mTransactorMockWithinTx) Calls() []*TransactorMockWithinTxParams {
	mmWithinTx.mutex.RLock()

	argCopy := make([]*TransactorMockWithinTxParams, len(mmWithinTx.callArgs))
	copy(argCopy, mmWithinTx.callArgs)

	mmWithinTx.mutex.RUnlock()

	return argCopy
}

// MinimockWithinTxDone returns true if the count of the WithinTx invocations corresponds
// the number of defined expectations
func (m *TransactorMock) MinimockWithinTxDone() bool {
	if m.WithinTxMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.WithinTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.WithinTxMock.invocationsDone()
}

// MinimockWithinTxInspect logs each unmet expectation
func (m *TransactorMock) MinimockWithinTxInspect() {
	for _, e := range m.WithinTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransactorMock.WithinTx at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterWithinTxCounter := mm_atomic.LoadUint64(&m.afterWithinTxCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.WithinTxMock.defaultExpectation != nil && afterWithinTxCounter < 1 {
		if m.WithinTxMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TransactorMock.WithinTx at\n%s", m.WithinTxMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TransactorMock.WithinTx at\n%s with params: %#v", m.WithinTxMock.defaultExpectation.expectationOrigins.origin, *m.WithinTxMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWithinTx != nil && afterWithinTxCounter < 1 {
		m.t.Errorf("Expected call to TransactorMock.WithinTx at\n%s", m.funcWithinTxOrigin)
	}

	if !m.WithinTxMock.invocationsDone() && afterWithinTxCounter > 0 {
		m.t.Errorf("Expected %d calls to TransactorMock.WithinTx at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.WithinTxMock.expectedInvocations), m.WithinTxMock.expectedInvocationsOrigin, afterWithinTxCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TransactorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockWithinTxInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TransactorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TransactorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockWithinTxDone()
}

services:
  postgres:
    container_name: postgres-oniontx
    image: postgres:14.5-alpine3.16
    shm_size: '256m'
    environment:
      - POSTGRES_DB=test
      - POSTGRES_PASSWORD=passwd
      - POSTGRES_USER=test
    expose:
      - "5432"
    ports:
      - "6432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "test", "-d", "test" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  postgres-migration:
    container_name: postgres-migration-oniontx
    build:
      context: integration/migration
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint:
      - "/bin/sh"
      - "-ecx"
      - "./migration -cmd up -url postgresql://test:passwd@postgres-oniontx:5432/test?sslmode=disable"

  redis:
    image: redis:latest
    container_name: redis-oniontx
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  mongo:
    image: mongo:latest
    container_name: mongo-oniontx
    ports:
      - "27017:27017"
    command: "--bind_ip_all --quiet --logpath /dev/null --replSet rs0"
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' localhost:27017/test --quiet
      interval: 2s
      timeout: 3s
      retries: 5

  mongo-init:
    image: mongo:latest
    container_name: mongo-init-oniontx
    restart: "no"
    depends_on:
      mongo:
        condition: service_healthy
    command: >
      mongosh --host mongo:27017 --eval
      '
      rs.initiate( {
         _id : "rs0",
         members: [
            { _id: 0, host: "localhost:27017" }
         ]
      })
      '
